#!/usr/bin/env python3
import argparse
from dataclasses import dataclass
from pathlib import Path
from subprocess import run
import shutil
from typing import Dict, List

from themes import themes, Theme, get_theme


LEFT_TAG="{)"
RIGHT_TAG="(}"


@dataclass
class Config:
    TEMPLATES_DIR = Path(__file__).parent / "templates"
    name: str
    template_path: Path
    output_path: Path


def build_values(font: str, theme: Theme) -> Dict[str, str]:
    return {
        "tool-name": "decorate",
        "font": font,
        "theme-name": theme.name,
        "base00-hex": theme.colors.base00.to_hex(),
        "base01-hex": theme.colors.base01.to_hex(),
        "base02-hex": theme.colors.base02.to_hex(),
        "base03-hex": theme.colors.base03.to_hex(),
        "base04-hex": theme.colors.base04.to_hex(),
        "base05-hex": theme.colors.base05.to_hex(),
        "base06-hex": theme.colors.base06.to_hex(),
        "base07-hex": theme.colors.base07.to_hex(),
        "base08-hex": theme.colors.base08.to_hex(),
        "base09-hex": theme.colors.base09.to_hex(),
        "base0A-hex": theme.colors.base0A.to_hex(),
        "base0B-hex": theme.colors.base0B.to_hex(),
        "base0C-hex": theme.colors.base0C.to_hex(),
        "base0D-hex": theme.colors.base0D.to_hex(),
        "base0E-hex": theme.colors.base0E.to_hex(),
        "base0F-hex": theme.colors.base0F.to_hex(),
        "base10-hex": theme.colors.base10.to_hex(),
        "base11-hex": theme.colors.base11.to_hex(),
        "base12-hex": theme.colors.base12.to_hex(),
        "base13-hex": theme.colors.base13.to_hex(),
        "base14-hex": theme.colors.base14.to_hex(),
        "base15-hex": theme.colors.base15.to_hex(),
        "base16-hex": theme.colors.base16.to_hex(),
        "base17-hex": theme.colors.base17.to_hex(),
    }


def generate_config(config: Config, values: Dict[str, str]):
    with open(config.template_path, "r") as template:
        config.output_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy(config.template_path, config.output_path)
        with open(config.output_path, "w") as output:
            for line in template:
                for k, v in values.items():
                    line = line.replace(LEFT_TAG + k + RIGHT_TAG, v)
                output.write(line)


def main(font: str, theme: Theme):
    values = build_values(font, theme)
    configs = [
        Config("Alacritty", Config.TEMPLATES_DIR / "alacritty" / "appearance.yml", Path.home() / ".config" / "alacritty" / "appearance.yml"),
        Config("Helix", Config.TEMPLATES_DIR / "helix" / "colorscheme.toml", Path.home() / ".config" / "helix" / "themes" / "personal.toml"),
        Config("Rofi", Config.TEMPLATES_DIR / "rofi" / "palette.rasi", Path.home() / ".config" / "rofi" / "palette.rasi"),
        Config("Neovim", Config.TEMPLATES_DIR / "nvim" / "base16.vim", Path.home() / ".config" / "nvim" / "colors" / "base16.vim"),
        Config("i3", Config.TEMPLATES_DIR / "i3" / "config.appearance", Path.home() / ".config" / "i3" / "config.appearance"),
        Config("dmenu runner", Config.TEMPLATES_DIR / "i3" / "dmenu_runner.sh", Path.home() / ".config" / "i3" / "dmenu_runner.sh"),
        Config("i3status", Config.TEMPLATES_DIR / "i3" / "i3status.conf", Path.home() / ".config" / "i3" / "i3status.conf"),
        Config("qutebrowser", Config.TEMPLATES_DIR / "qutebrowser" / "theme.py", Path.home() / ".config" / "qutebrowser" / "theme.py"),
    ]
    for config in configs:
        print(f"Generating config for {config.name}")
        generate_config(config, values)


def prompt(header: str, options: List[str]) -> str:
    choice = run(
        ["sk", "--header", header, "--color=16"],
        input="\n".join(options),
        text=True,
        capture_output=True,
    ).stdout.strip()
    if len(choice) == 0:
        raise Exception()
    return choice


if __name__ == "__main__":
    themes = [theme.name for theme in themes]

    parser = argparse.ArgumentParser(description="Generate auxiliary config files based on input")
    parser.add_argument("--theme", choices=themes, help="Theme")
    parser.add_argument("--font", help="Font family (e.g. try `fc-list | cut -d: -f2 | cut -d, -f1 | sort -u`)")
    args = parser.parse_args()

    if args.theme:
        theme = args.theme
    else:
        try:
            theme = prompt("Choose Theme", themes)
        except Exception:
            print("Must specify theme")
            exit(1)

    if args.font:
        font = args.font
    else:
        fonts = [
            line.split(":")[1].strip()
            for line
            in run(["fc-list"], text=True, capture_output=True).stdout.strip().split("\n")
        ]
        processed_fonts = sorted(set(fonts))
        try:
            font = prompt("Choose Font", processed_fonts)
        except Exception:
            print("Must specify font")
            exit(1)

    main(font, get_theme(theme))
