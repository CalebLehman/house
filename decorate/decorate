#!/usr/bin/env python3

from themes import themes, Theme, get_theme

import argparse
from pathlib import Path

def generate_comment(theme: Theme):
    return f"Generated by `decorate` using theme `{theme.name}` - {theme.source}"

def alacritty(theme: Theme):
    config = f"""\
# {generate_comment(theme)}

font:
  normal:
    family: {theme.font}
    style: Regular

colors:
  primary:
    background: '#{theme.colors.background.to_hex()}'
    foreground: '#{theme.colors.foreground.to_hex()}'
  normal:
    black: '#{theme.colors.black.to_hex()}'
    red: '#{theme.colors.red.to_hex()}'
    green: '#{theme.colors.green.to_hex()}'
    yellow: '#{theme.colors.yellow.to_hex()}'
    blue: '#{theme.colors.blue.to_hex()}'
    magenta: '#{theme.colors.magenta.to_hex()}'
    cyan: '#{theme.colors.cyan.to_hex()}'
    white: '#{theme.colors.white.to_hex()}'
  bright:
    black: '#{theme.colors.bright_black.to_hex()}'
    red: '#{theme.colors.bright_red.to_hex()}'
    green: '#{theme.colors.bright_green.to_hex()}'
    yellow: '#{theme.colors.bright_yellow.to_hex()}'
    blue: '#{theme.colors.bright_blue.to_hex()}'
    magenta: '#{theme.colors.bright_magenta.to_hex()}'
    cyan: '#{theme.colors.bright_cyan.to_hex()}'
    white: '#{theme.colors.bright_white.to_hex()}'

window:
  opacity: {theme.opacity:.2f}
"""
    location = Path.home() / ".config" / "alacritty" / "alacritty.yml"
    print(f"Writing alacritty config to {location}")
    location.parent.mkdir(parents=True, exist_ok=True)
    with open(location, "w") as f:
        f.write(config)

def i3(theme: Theme):
    config = f"""\
# {generate_comment(theme)}

bar {{
    status_command "i3status -c ~/.config/i3/i3status.conf"
    tray_padding 3
    font pango:{theme.font} 10
    height 30
    separator_symbol "â”†"

    colors {{
        background #{theme.colors.background.to_hex()}
        statusline #{theme.colors.bright_black.to_hex()}
        separator #{theme.colors.bright_black.to_hex()}

        focused_workspace #{theme.colors.foreground.to_hex()} #{theme.colors.background.to_hex()} #{theme.colors.foreground.to_hex()}
        active_workspace #{theme.colors.background.to_hex()} #{theme.colors.background.to_hex()} #{theme.colors.foreground.to_hex()}
        inactive_workspace #{theme.colors.background.to_hex()} #{theme.colors.background.to_hex()} #{theme.colors.bright_black.to_hex()}
        urgent_workspace #{theme.colors.red.to_hex()} #{theme.colors.red.to_hex()} #{theme.colors.foreground.to_hex()}
        binding_mode #{theme.colors.red.to_hex()} #{theme.colors.red.to_hex()} #{theme.colors.foreground.to_hex()}
    }}
}}

# <colorclass> <border> <background> <text> <indicator> <child_border>
client.focused          #{theme.colors.foreground.to_hex()}   #{theme.colors.background.to_hex()}   #{theme.colors.foreground.to_hex()} #{theme.colors.bright_black.to_hex()} #{theme.colors.foreground.to_hex()}
client.focused_inactive #{theme.colors.bright_black.to_hex()} #{theme.colors.background.to_hex()}   #{theme.colors.foreground.to_hex()} #{theme.colors.bright_black.to_hex()} #{theme.colors.bright_black.to_hex()}
client.unfocused        #{theme.colors.bright_black.to_hex()} #{theme.colors.background.to_hex()}   #{theme.colors.foreground.to_hex()} #{theme.colors.bright_black.to_hex()} #{theme.colors.bright_black.to_hex()}
client.urgent           #{theme.colors.selection.to_hex()}    #{theme.colors.bright_black.to_hex()} #{theme.colors.foreground.to_hex()} #{theme.colors.bright_black.to_hex()} #{theme.colors.bright_black.to_hex()}
client.placeholder      #{theme.colors.background.to_hex()}   #{theme.colors.background.to_hex()}   #{theme.colors.foreground.to_hex()} #{theme.colors.background.to_hex()}   #{theme.colors.background.to_hex()}
client.background       #{theme.colors.selection.to_hex()}

font pango:{theme.font} 14px

smart_borders on
default_border          pixel 1
default_floating_border pixel 1

gaps inner 2
gaps outer 2
"""
    location = Path.home() / ".config" / "i3" / "config.appearance"
    print(f"Writing i3 appearance config to {location}")
    location.parent.mkdir(parents=True, exist_ok=True)
    with open(location, "w") as f:
        f.write(config)

def helix(theme: Theme):
    config = f"""\
# {generate_comment(theme)}

inherits = "{theme.helix}"

"ui.background" = {{}}
"ui.statusline" = {{ fg = "yellow" }}
"ui.statusline.inactive" = {{ fg = "gray" }}
"ui.statusline.normal" = {{ fg = "black", bg = "red" }}
"ui.statusline.insert" = {{ fg = "black", bg = "yellow" }}
"ui.statusline.select" = {{ fg = "black", bg = "magenta" }}

[palette]
# WIP - may need to add more information to theme templates
"""
    location = Path.home() / ".config" / "helix" / "themes" / "personal.toml"
    print(f"Writing helix `personal` theme to {location}")
    location.parent.mkdir(parents=True, exist_ok=True)
    with open(location, "w") as f:
        f.write(config)

def rofi(theme: Theme):
    config = f"""\
/* {generate_comment(theme)} */

* {{
    theme-background: #{theme.colors.background.to_hex()};
    theme-foreground: #{theme.colors.foreground.to_hex()};
    theme-selection: #{theme.colors.selection.to_hex()};
    theme-comment: #{theme.colors.comment.to_hex()};
    theme-black: #{theme.colors.black.to_hex()};
    theme-red: #{theme.colors.red.to_hex()};
    theme-green: #{theme.colors.green.to_hex()};
    theme-yellow: #{theme.colors.yellow.to_hex()};
    theme-blue: #{theme.colors.blue.to_hex()};
    theme-magenta: #{theme.colors.magenta.to_hex()};
    theme-cyan: #{theme.colors.cyan.to_hex()};
    theme-white: #{theme.colors.white.to_hex()};
    theme-bright-black: #{theme.colors.bright_black.to_hex()};
    theme-bright-red: #{theme.colors.bright_red.to_hex()};
    theme-bright-green: #{theme.colors.bright_green.to_hex()};
    theme-bright-yellow: #{theme.colors.bright_yellow.to_hex()};
    theme-bright-blue: #{theme.colors.bright_blue.to_hex()};
    theme-bright-magenta: #{theme.colors.bright_magenta.to_hex()};
    theme-bright-cyan: #{theme.colors.bright_cyan.to_hex()};
    theme-bright-white: #{theme.colors.bright_white.to_hex()};

    font: "{theme.font} 14";
}}
"""
    location = Path.home() / ".config" / "rofi" / "palette.rasi"
    print(f"Writing rofi palette to {location}")
    location.parent.mkdir(parents=True, exist_ok=True)
    with open(location, "w") as f:
        f.write(config)

def qutebrowser(theme: Theme):
    config = f"""\
# {generate_comment(theme)}

theme = {{
    "background": "#{theme.colors.background.to_hex()}",
    "foreground": "#{theme.colors.foreground.to_hex()}",
    "selection": "#{theme.colors.selection.to_hex()}",
    "comment": "#{theme.colors.comment.to_hex()}",
    "black": "#{theme.colors.black.to_hex()}",
    "red": "#{theme.colors.red.to_hex()}",
    "green": "#{theme.colors.green.to_hex()}",
    "yellow": "#{theme.colors.yellow.to_hex()}",
    "blue": "#{theme.colors.blue.to_hex()}",
    "magenta": "#{theme.colors.magenta.to_hex()}",
    "cyan": "#{theme.colors.cyan.to_hex()}",
    "white": "#{theme.colors.white.to_hex()}",
    "bright_black": "#{theme.colors.bright_black.to_hex()}",
    "bright_red": "#{theme.colors.bright_red.to_hex()}",
    "bright_green": "#{theme.colors.bright_green.to_hex()}",
    "bright_yellow": "#{theme.colors.bright_yellow.to_hex()}",
    "bright_blue": "#{theme.colors.bright_blue.to_hex()}",
    "bright_magenta": "#{theme.colors.bright_magenta.to_hex()}",
    "bright_cyan": "#{theme.colors.bright_cyan.to_hex()}",
    "bright_white": "#{theme.colors.bright_white.to_hex()}",
    "font": "{theme.font}",
}}
"""
    location = Path.home() / ".config" / "qutebrowser" / "theme.py"
    print(f"Writing qutebrowser theme to {location}")
    location.parent.mkdir(parents=True, exist_ok=True)
    with open(location, "w") as f:
        f.write(config)

def main(theme: Theme):
    alacritty(theme)
    i3(theme)
    helix(theme)
    rofi(theme)
    qutebrowser(theme)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate auxiliary config files based on input")
    parser.add_argument("theme", choices=[theme.name for theme in themes], help="Theme")
    args = parser.parse_args()
    
    main(get_theme(args.theme))
